{"version":3,"sources":["worker.js","constants.js","GridSquare.js","ResultsPlot.js","Grid.js","ControlPanel.js","gameLogic.js","App.js","index.js"],"names":["module","exports","Worker","MODES","Object","freeze","HUMAN_PLAY","BOT_PLAY","BOT_TRAIN","GridSquare","props","col","row","style","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","agent","data","start","onClick","switch","className","type","ResultsPlot","title","textAlign","width","height","map","x","dataKey","stroke","Grid","rows","length","cols","gridTemplateColumns","repeat","gridTemplateRows","switchType","gridElements","r","c","key","flat","ref","aRef","onKeyDown","keyDownFunc","tabIndex","rewardsData","Math","floor","currReward","lastReward","ControlPanel","updateFailRate","e","setState","failRate","target","value","updateCostOfLiving","costOfLiving","state","colRef","React","createRef","failRef","id","values","mode","idx","setMode","display","this","trainAsync","onChange","max","min","step","current","focus","href","Component","move","grid","intendedDir","agentLoc","rand","random","dir","nextLoc","slice","nextLocReward","changeInReward","gameover","qVals","newQ","App","focusDiv","myRef","newGrid","handleKeyDown","keyCode","preventDefault","updateState","clearInterval","botInterval","setInterval","botMove","exploitProb","square","options","forEach","val","i","push","chooseMove","reward","rewardsList","botRewards","parseFloat","isNaN","worker","postMessage","newRow","addEventListener","onClickCapture","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0dcfa54.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"cfb6bf3bdc9c9c886b7f.worker.js\");\n};","export const COST_OF_LIVING_DEFAULT = -0.2;\r\nexport const GREEN_REWARD = 10;\r\nexport const RED_COST = -10;\r\nexport const DISCOUNT = 0.001;\r\nexport const LEARNING_RATE = 0.001;\r\nexport const FAIL_RATE_DEFAULT = 0.1;\r\nexport const ROWS = 5;\r\nexport const COLS = 10;\r\nexport const MODES = Object.freeze({\r\n  HUMAN_PLAY: \"Human Play\",\r\n  BOT_PLAY: \"Bot Play\",\r\n  BOT_TRAIN: \"Bot Train\"\r\n});\r\nexport const DISPLAY_Q_VALUES = false;\r\nexport const EPSILON = 0.8;\r\n","import React from \"react\";\r\nimport \"./GridSquare.css\";\r\nimport { DISPLAY_Q_VALUES } from \"./constants\";\r\n\r\nfunction GridSquare(props) {\r\n  const col = props.col + 1; //array index to grid index\r\n  const row = props.row + 1;\r\n  const style = {\r\n    gridColumnStart: col,\r\n    gridColumnEnd: col + 1,\r\n    gridRowStart: row,\r\n    gridRowEnd: row + 1\r\n  };\r\n  const agent = props.data.agent ? \" agent\" : \"\";\r\n  const start = col === 1 && row === 1 ? \" start\" : \"\";\r\n  return (\r\n    <div\r\n      onClick={props.switch}\r\n      style={style}\r\n      className={\"gridSquare \" + props.data.type + agent + start}\r\n    >\r\n      {DISPLAY_Q_VALUES ? (\r\n        <>\r\n          <div className=\"tri left\">\r\n            <p>{Math.round(props.data.qVals[0] * 10) / 10}</p>\r\n          </div>\r\n          <div className=\"tri up\">\r\n            <p>{Math.round(props.data.qVals[1] * 10) / 10}</p>\r\n          </div>\r\n          <div className=\"tri right\">\r\n            <p>{Math.round(props.data.qVals[2] * 10) / 10}</p>\r\n          </div>\r\n          <div className=\"tri down\">\r\n            <p>{Math.round(props.data.qVals[3] * 10) / 10}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\nexport default GridSquare;\r\n","import React from \"react\";\r\nimport { LineChart, Line, YAxis } from \"recharts\";\r\n\r\nexport default function ResultsPlot(props) {\r\n  const { data, title, style } = props;\r\n\r\n  return (\r\n    <div style={{ ...style, textAlign: \"center\" }}>\r\n      <h3>{title}</h3>\r\n      <LineChart\r\n        width={400}\r\n        height={200}\r\n        data={data.map(x => {\r\n          return { data: x };\r\n        })}\r\n        title=\"title\"\r\n      >\r\n        <Line type=\"monotone\" dataKey=\"data\" stroke=\"#8884d8\" />\r\n        <YAxis />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport GridSquare from \"./GridSquare\";\r\nimport \"./Grid.css\";\r\nimport ResultsPlot from \"./ResultsPlot\";\r\n\r\nfunction Grid(props) {\r\n  const rows = props.data.length;\r\n  const cols = props.data[0].length;\r\n  const style = {\r\n    gridTemplateColumns: \"60px \".repeat(cols) + \"auto\",\r\n    gridTemplateRows: \"60px \".repeat(rows) + \"20px\"\r\n  };\r\n  const switchType = (row, col) => {\r\n    return function() {\r\n      props.switchType(row, col);\r\n    };\r\n  };\r\n  const gridElements = props.data.map(function(row, r) {\r\n    return row\r\n      .map(function(data, c) {\r\n        return (\r\n          <GridSquare\r\n            switch={switchType(r, c)}\r\n            row={r}\r\n            col={c}\r\n            data={data}\r\n            key={`${r}${c}`}\r\n          />\r\n        );\r\n      })\r\n      .flat();\r\n  });\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={style}\r\n      ref={props.aRef}\r\n      onKeyDown={props.keyDownFunc}\r\n      tabIndex={0}\r\n    >\r\n      {gridElements}\r\n      <ResultsPlot\r\n        style={{\r\n          gridColumnStart: cols + 1,\r\n          gridColumnEnd: cols + 2,\r\n          gridRowStart: 1,\r\n          gridRowEnd: rows + 1\r\n        }}\r\n        title=\"Bot Rewards History\"\r\n        data={props.rewardsData}\r\n      />\r\n      <p\r\n        style={{\r\n          gridColumnStart: 1,\r\n          gridColumnEnd: 4,\r\n          gridRowStart: rows + 1,\r\n          gridRowEnd: rows + 2\r\n        }}\r\n      >\r\n        Current Reward: {Math.floor(props.currReward * 10) / 10}\r\n      </p>\r\n      <p\r\n        style={{\r\n          gridColumnStart: 4,\r\n          gridColumnEnd: 7,\r\n          gridRowStart: rows + 1,\r\n          gridRowEnd: rows + 2\r\n        }}\r\n      >\r\n        Last Reward: {Math.floor(props.lastReward * 10) / 10 || \"_\"}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport \"./ControlPanel.css\";\r\nimport { COST_OF_LIVING_DEFAULT, FAIL_RATE_DEFAULT, MODES } from \"./constants\";\r\n\r\nclass ControlPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n    this.state = {\r\n      costOfLiving: COST_OF_LIVING_DEFAULT,\r\n      failRate: FAIL_RATE_DEFAULT\r\n    };\r\n    this.colRef = React.createRef();\r\n    this.failRef = React.createRef();\r\n  }\r\n  updateFailRate = e => {\r\n    this.setState({ failRate: e.target.value });\r\n    this.props.updateFailRate(e);\r\n  };\r\n\r\n  updateCostOfLiving = e => {\r\n    this.setState({ costOfLiving: e.target.value });\r\n    this.props.updateCostOfLiving(e);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"controlPanel\">\r\n        <div>\r\n          {Object.values(MODES).map((mode, idx) => (\r\n            <button\r\n              onClick={() => this.props.setMode(mode)}\r\n              className={`mode${mode === this.props.mode ? \" selected\" : \"\"}`}\r\n              key={idx}\r\n            >\r\n              {mode}\r\n            </button>\r\n          ))}\r\n          <div style={{ width: \"10px\", display: \"inline-block\" }} />\r\n          <button onClick={this.props.trainAsync}>Train Asynchronously</button>\r\n          <br />\r\n          <label>Cost of Living: </label>\r\n          <input\r\n            value={this.state.costOfLiving}\r\n            onChange={this.updateCostOfLiving}\r\n            max={0}\r\n            min={-10}\r\n            step={0.1}\r\n            type=\"number\"\r\n            ref={this.colRef}\r\n            onClick={() => this.colRef.current.focus()}\r\n          ></input>\r\n          <br />\r\n          <label>Fail Rate: </label>\r\n          <input\r\n            value={this.state.failRate}\r\n            onChange={this.updateFailRate}\r\n            min={0}\r\n            max={1}\r\n            type=\"number\"\r\n            step={0.1}\r\n            ref={this.failRef}\r\n            onClick={() => this.failRef.current.focus()}\r\n          ></input>\r\n          <br />\r\n        </div>\r\n        <ol>\r\n          <li>Left click to edit board</li>\r\n          <li>Use arrow keys to move agent</li>\r\n          <li>\r\n            The \"Fail Rate\" will determine the likelihood of the agent moving\r\n            unexpectedly\r\n          </li>\r\n          <li>Collect \"Cost of Living\" reward with every move</li>\r\n          <li>Collect +10 reward for running into a green \"end state\"</li>\r\n          <li>Collect -10 reward for running into a red \"end state\"</li>\r\n          <li>\r\n            See how the bot does, and read more about&nbsp;\r\n            <a href=\"https://en.wikipedia.org/wiki/Q-learning\">Q-Learning</a>!\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import { RED_COST, GREEN_REWARD, DISCOUNT, LEARNING_RATE } from \"./constants\";\r\n\r\n/* Given an array of objects grid, and an intended direction integer from 0-3\r\n * representing left, up, right, or down, a costOfLiving representing base changes\r\n * change in reward for each move and a failRate indicating likelihood of\r\n * turning left or right unintentionally\r\n * Returns the agents nextLocation, the change in reward, the updated qval,\r\n * and whether or not it was gameover\r\n */\r\nexport const move = (grid, intendedDir, agentLoc, costOfLiving, failRate) => {\r\n  const rand = Math.random();\r\n  let dir = intendedDir;\r\n  if (rand < failRate / 2) {\r\n    dir++;\r\n  } else if (rand < failRate) {\r\n    dir--;\r\n  }\r\n  dir = dir % 4;\r\n\r\n  let nextLoc = agentLoc.slice();\r\n  switch (dir) {\r\n    case 0: // left\r\n      nextLoc[1]--;\r\n      break;\r\n    case 1: // up\r\n      nextLoc[0]--;\r\n      break;\r\n    case 2: // right\r\n      nextLoc[1]++;\r\n      break;\r\n    case 3: // down\r\n      nextLoc[0]++;\r\n      break;\r\n    default:\r\n  }\r\n\r\n  if (\r\n    nextLoc[0] < 0 ||\r\n    nextLoc[0] >= grid.length ||\r\n    nextLoc[1] < 0 ||\r\n    nextLoc[1] >= grid[0].length\r\n  ) {\r\n    nextLoc = agentLoc; // bring back to previous spot\r\n  }\r\n\r\n  let changeInReward = costOfLiving;\r\n  let nextLocReward;\r\n  let nextType = grid[nextLoc[0]][nextLoc[1]].type;\r\n  let gameover = false;\r\n  switch (nextType) {\r\n    case \"normal\":\r\n      nextLocReward = Math.max(...grid[nextLoc[0]][nextLoc[1]].qVals);\r\n      break;\r\n    case \"wall\":\r\n      nextLoc = agentLoc;\r\n      nextLocReward = Math.max(...grid[nextLoc[0]][nextLoc[1]].qVals);\r\n      break;\r\n    case \"reward\":\r\n      changeInReward += GREEN_REWARD;\r\n      gameover = true;\r\n      break;\r\n    case \"cost\":\r\n      changeInReward += RED_COST;\r\n      gameover = true;\r\n      break;\r\n    default:\r\n  }\r\n\r\n  if (gameover) {\r\n    nextLoc = [0, 0];\r\n    nextLocReward = 0;\r\n  }\r\n\r\n  const prevQ = grid[agentLoc[0]][agentLoc[1]].qVals[intendedDir];\r\n\r\n  const proposedQ = changeInReward + (1 - DISCOUNT) * nextLocReward;\r\n  const newQ = prevQ * (1 - LEARNING_RATE) + proposedQ * LEARNING_RATE;\r\n  return { nextLoc, newQ, changeInReward, gameover };\r\n};\r\n\r\n/* Takes a 2d array of objects grid and array agent ([row,col])\r\n * With probability exploitProb returns a best direction based on qvals\r\n * Otherwise returns a random move\r\n */\r\nexport function chooseMove(grid, agent, exploitProb) {\r\n  if (Math.random() < exploitProb) {\r\n    // best move\r\n    let square = grid[agent[0]][agent[1]];\r\n    let max = Math.max(...square.qVals);\r\n    let options = [];\r\n\r\n    square.qVals.forEach((val, i) => {\r\n      if (val === max) {\r\n        options.push(i);\r\n      }\r\n    });\r\n    return options[Math.floor(Math.random() * options.length)];\r\n  } else {\r\n    // explore\r\n    return Math.floor(Math.random() * 4);\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport {\n  COST_OF_LIVING_DEFAULT,\n  FAIL_RATE_DEFAULT,\n  ROWS,\n  COLS,\n  MODES,\n  EPSILON\n} from \"./constants\";\nimport \"./App.css\";\nimport Grid from \"./Grid\";\nimport ControlPanel from \"./ControlPanel\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Worker from \"worker-loader!./worker.js\";\nimport { move, chooseMove } from \"./gameLogic\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const agent = [0, 0];\n    const grid = [];\n    for (let r = 1; r <= ROWS; r++) {\n      const newRow = [];\n      grid.push(newRow);\n      for (let c = 1; c <= COLS; c++) {\n        newRow.push({\n          type: \"normal\",\n          agent: false,\n          qVals: [0, 0, 0, 0]\n        });\n      }\n    }\n    grid[agent[0]][agent[1]].agent = true;\n    this.state = {\n      grid: grid,\n      mode: MODES.HUMAN_PLAY,\n      agent: agent,\n      reward: 0,\n      lastReward: \"_\",\n      botRewards: [],\n      costOfLiving: COST_OF_LIVING_DEFAULT,\n      failRate: FAIL_RATE_DEFAULT\n    };\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.focusDiv();\n    this.worker = new Worker();\n    this.worker.addEventListener(\"message\", e => {\n      const agent = this.state.agent;\n      e.data[agent[0]][agent[1]].agent = true;\n      this.setState({ grid: e.data });\n    });\n  }\n\n  // focuses on grid\n  focusDiv = () => {\n    this.myRef.current.focus();\n  };\n\n  // given row/col of gridSquare, changes its type\n  // (normal -> wall -> reward -> cost -> normal)\n  switchType = (row, col) => {\n    const newGrid = this.state.grid.slice();\n    newGrid[row] = newGrid[row].slice();\n    switch (newGrid[row][col].type) {\n      case \"normal\":\n        newGrid[row][col].type = \"wall\";\n        break;\n      case \"wall\":\n        newGrid[row][col].type = \"reward\";\n        break;\n      case \"reward\":\n        newGrid[row][col].type = \"cost\";\n        break;\n      case \"cost\":\n        newGrid[row][col].type = \"normal\";\n        break;\n      default:\n    }\n    this.setState({ grid: newGrid });\n  };\n\n  /* Does nothing in HUMAN_PLAY mode or if arrow keys weren't pressed\n   * otherwise does move indicated by arrow keys and updates state\n   */\n  handleKeyDown = e => {\n    if (\n      this.state.mode !== MODES.HUMAN_PLAY ||\n      e.keyCode < 37 ||\n      e.keyCode > 40\n    ) {\n      return;\n    }\n    e.preventDefault();\n    let dir = e.keyCode - 37; //37 is the key code for left\n    const { nextLoc, newQ, changeInReward, gameover } = move(\n      this.state.grid,\n      dir,\n      this.state.agent,\n      this.state.costOfLiving,\n      this.state.failRate\n    );\n    this.updateState(dir, nextLoc, newQ, changeInReward, gameover);\n  };\n\n  // if passed mode is different then current mode, changes mode, clearsIntervals\n  // and starts a interval for bot movement if mode is BOT_TRAIN or BOT_PLAY\n  setMode = mode => {\n    if (this.state.mode === mode) return;\n    clearInterval(this.state.botInterval);\n    let botInterval = null;\n    if (mode === MODES.BOT_TRAIN) {\n      botInterval = setInterval(this.botMove, 50);\n    } else if (mode === MODES.BOT_PLAY) {\n      botInterval = setInterval(this.botMove, 150);\n    }\n\n    //set interval for doing training move if\n    this.setState({ mode: mode, botInterval: botInterval });\n  };\n\n  //Executes move by bot and updates state\n  //updates q values\n  botMove = () => {\n    let exploitProb = this.state.mode === MODES.BOT_TRAIN ? EPSILON : 1;\n    let dir = chooseMove(this.state.grid, this.state.agent, exploitProb);\n\n    const { nextLoc, newQ, changeInReward, gameover } = move(\n      this.state.grid,\n      dir,\n      this.state.agent,\n      this.state.costOfLiving,\n      this.state.failRate\n    );\n    this.updateState(dir, nextLoc, newQ, changeInReward, gameover);\n  };\n\n  updateState = (intendedDir, nextLoc, newQ, changeInReward, gameover) => {\n    const grid = this.state.grid.slice();\n    grid[this.state.agent[0]] = grid[this.state.agent[0]].slice();\n    grid[nextLoc[0]] = grid[nextLoc[0]].slice();\n\n    //update qVals\n    grid[this.state.agent[0]][this.state.agent[1]].qVals[intendedDir] = newQ;\n    //move agent\n    grid[this.state.agent[0]][this.state.agent[1]].agent = false;\n    grid[nextLoc[0]][nextLoc[1]].agent = true;\n    //change rewards\n    let reward = this.state.reward + changeInReward;\n    let lastReward = this.state.lastReward;\n    if (gameover && this.state.mode !== MODES.HUMAN_PLAY) {\n      const rewardsList = this.state.botRewards.slice();\n      rewardsList.push(reward);\n      this.setState({ botRewards: rewardsList });\n    }\n    if (gameover) {\n      lastReward = reward;\n      reward = 0; //reset reward\n    }\n\n    this.setState({\n      reward,\n      grid,\n      lastReward,\n      agent: nextLoc\n    });\n  };\n  updateCostOfLiving = e => {\n    let val = parseFloat(e.target.value);\n    if (!isNaN(val) && val <= 0 && val >= -10)\n      this.setState({ costOfLiving: val });\n  };\n  updateFailRate = e => {\n    let val = parseFloat(e.target.value);\n    if (!isNaN(val) && val >= 0 && val <= 1) {\n      this.setState({ failRate: val });\n    }\n  };\n  trainAsync = () => {\n    this.worker.postMessage({\n      grid: this.state.grid,\n      agent: this.state.agent,\n      costOfLiving: this.state.costOfLiving,\n      failRate: this.state.failRate\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\" tabIndex={0} onClickCapture={this.focusDiv}>\n        <ControlPanel\n          setMode={this.setMode}\n          mode={this.state.mode}\n          costOfLiving={this.state.costOfLiving}\n          updateCostOfLiving={this.updateCostOfLiving}\n          failRate={this.state.failRate}\n          updateFailRate={this.updateFailRate}\n          trainAsync={this.trainAsync}\n        />\n        <Grid\n          data={this.state.grid}\n          rewardsData={this.state.botRewards}\n          switchType={this.switchType}\n          aRef={this.myRef}\n          keyDownFunc={this.handleKeyDown}\n          currReward={this.state.reward}\n          lastReward={this.state.lastReward}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}