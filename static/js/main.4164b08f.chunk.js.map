{"version":3,"sources":["worker.js","constants.js","stickfigure.png","GridSquare.js","ResultsPlot.js","Grid.js","ControlPanel.js","gameLogic.js","App.js","index.js"],"names":["module","exports","Worker","MODES","Object","freeze","HUMAN_PLAY","BOT_PLAY","BOT_TRAIN","GridSquare","props","col","row","style","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","agent","data","start","console","log","onClick","switch","className","type","src","AgentPicture","ResultsPlot","title","textAlign","class","resetRewards","width","height","map","x","dataKey","stroke","Grid","rows","length","cols","gridTemplateColumns","repeat","gridTemplateRows","switchType","gridElements","r","c","key","flat","ref","aRef","onKeyDown","keyDownFunc","tabIndex","rewardsData","Math","floor","currReward","lastReward","ControlPanel","updateFailRate","e","setState","failRate","target","value","updateCostOfLiving","costOfLiving","state","colRef","React","createRef","failRef","id","values","mode","idx","setMode","display","this","trainAsync","workingAsync","onChange","max","min","step","current","focus","color","href","Component","move","grid","intendedDir","agentLoc","rand","random","dir","nextLoc","slice","nextLocReward","changeInReward","gameover","qVals","newQ","App","focusDiv","myRef","preventScroll","newGrid","handleKeyDown","keyCode","preventDefault","updateState","clearInterval","botInterval","setInterval","botMove","exploitProb","square","options","forEach","val","i","push","reduce","bestDir","smallest","counts","inf","chooseMove","currGridSquare","assign","reward","rewardsList","botRewards","parseFloat","isNaN","worker","postMessage","newRow","addEventListener","onClickCapture","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4164b08f.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"4b22d79751a1b66f2211.worker.js\");\n};","export const COST_OF_LIVING_DEFAULT = -0.2;\r\nexport const GREEN_REWARD = 10;\r\nexport const RED_COST = -10;\r\nexport const DISCOUNT = 0.01;\r\nexport const LEARNING_RATE = 0.1;\r\nexport const FAIL_RATE_DEFAULT = 0.1;\r\nexport const ROWS = 5;\r\nexport const COLS = 10;\r\nexport const MODES = Object.freeze({\r\n  HUMAN_PLAY: \"Human Play\",\r\n  BOT_PLAY: \"Bot Play\",\r\n  BOT_TRAIN: \"Bot Train\"\r\n});\r\nexport const DISPLAY_Q_VALUES = false;\r\nexport const EPSILON = 0.8;\r\n","export default __webpack_public_path__ + \"static/media/stickfigure.8aeec50f.png\";","import React from \"react\";\r\nimport \"./GridSquare.css\";\r\nimport { DISPLAY_Q_VALUES } from \"./constants\";\r\nimport AgentPicture from \"./stickfigure.png\";\r\n\r\nfunction GridSquare(props) {\r\n  const col = props.col + 1; //array index to grid index\r\n  const row = props.row + 1;\r\n  const style = {\r\n    gridColumnStart: col,\r\n    gridColumnEnd: col + 1,\r\n    gridRowStart: row,\r\n    gridRowEnd: row + 1\r\n  };\r\n  const agent = props.data.agent ? \" agent\" : \"\";\r\n  const start = col === 1 && row === 1 ? \" start\" : \"\";\r\n  console.log();\r\n  return (\r\n    <div\r\n      onClick={props.switch}\r\n      style={style}\r\n      className={\"gridSquare \" + props.data.type + agent + start}\r\n    >\r\n      {DISPLAY_Q_VALUES ? (\r\n        <>\r\n          <div className=\"tri left\">\r\n            <p>{Math.round(props.data.qVals[0] * 10) / 10}</p>\r\n          </div>\r\n          <div className=\"tri up\">\r\n            <p>{Math.round(props.data.qVals[1] * 10) / 10}</p>\r\n          </div>\r\n          <div className=\"tri right\">\r\n            <p>{Math.round(props.data.qVals[2] * 10) / 10}</p>\r\n          </div>\r\n          <div className=\"tri down\">\r\n            <p>{Math.round(props.data.qVals[3] * 10) / 10}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n      {props.data.agent ? <img src={AgentPicture} /> : null}\r\n    </div>\r\n  );\r\n}\r\nexport default GridSquare;\r\n","import React from \"react\";\r\nimport { LineChart, Line, YAxis } from \"recharts\";\r\nimport \"./ResultsPlot.css\";\r\nexport default function ResultsPlot(props) {\r\n  const { data, title, style } = props;\r\n\r\n  return (\r\n    <div style={{ ...style, textAlign: \"center\" }}>\r\n      <span class=\"title\">{title}</span>\r\n      <button class=\"reset\" onClick={props.resetRewards}>\r\n        Reset\r\n      </button>\r\n      <LineChart\r\n        width={400}\r\n        height={200}\r\n        data={data.map(x => {\r\n          return { data: x };\r\n        })}\r\n        title=\"title\"\r\n      >\r\n        <Line type=\"monotone\" dataKey=\"data\" stroke=\"#8884d8\" />\r\n        <YAxis />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport GridSquare from \"./GridSquare\";\r\nimport \"./Grid.css\";\r\nimport ResultsPlot from \"./ResultsPlot\";\r\n\r\nfunction Grid(props) {\r\n  const rows = props.data.length;\r\n  const cols = props.data[0].length;\r\n  const style = {\r\n    gridTemplateColumns: \"60px \".repeat(cols) + \"auto\",\r\n    gridTemplateRows: \"60px \".repeat(rows) + \"20px\"\r\n  };\r\n  const switchType = (row, col) => {\r\n    return function() {\r\n      props.switchType(row, col);\r\n    };\r\n  };\r\n  const gridElements = props.data.map(function(row, r) {\r\n    return row\r\n      .map(function(data, c) {\r\n        return (\r\n          <GridSquare\r\n            switch={switchType(r, c)}\r\n            row={r}\r\n            col={c}\r\n            data={data}\r\n            key={`${r}${c}`}\r\n          />\r\n        );\r\n      })\r\n      .flat();\r\n  });\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={style}\r\n      ref={props.aRef}\r\n      onKeyDown={props.keyDownFunc}\r\n      tabIndex={0}\r\n    >\r\n      {gridElements}\r\n      <ResultsPlot\r\n        style={{\r\n          gridColumnStart: cols + 1,\r\n          gridColumnEnd: cols + 2,\r\n          gridRowStart: 1,\r\n          gridRowEnd: rows + 1\r\n        }}\r\n        title=\"Bot Rewards History\"\r\n        data={props.rewardsData}\r\n        resetRewards={props.resetRewards}\r\n      />\r\n      <p\r\n        style={{\r\n          gridColumnStart: 1,\r\n          gridColumnEnd: 4,\r\n          gridRowStart: rows + 1,\r\n          gridRowEnd: rows + 2\r\n        }}\r\n      >\r\n        Current Reward: {Math.floor(props.currReward * 10) / 10}\r\n      </p>\r\n      <p\r\n        style={{\r\n          gridColumnStart: 4,\r\n          gridColumnEnd: 7,\r\n          gridRowStart: rows + 1,\r\n          gridRowEnd: rows + 2\r\n        }}\r\n      >\r\n        Last Reward: {Math.floor(props.lastReward * 10) / 10 || \"_\"}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport \"./ControlPanel.css\";\r\nimport { COST_OF_LIVING_DEFAULT, FAIL_RATE_DEFAULT, MODES } from \"./constants\";\r\n\r\nclass ControlPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n    this.state = {\r\n      costOfLiving: COST_OF_LIVING_DEFAULT,\r\n      failRate: FAIL_RATE_DEFAULT\r\n    };\r\n    this.colRef = React.createRef();\r\n    this.failRef = React.createRef();\r\n  }\r\n  updateFailRate = e => {\r\n    this.setState({ failRate: e.target.value });\r\n    this.props.updateFailRate(e);\r\n  };\r\n\r\n  updateCostOfLiving = e => {\r\n    this.setState({ costOfLiving: e.target.value });\r\n    this.props.updateCostOfLiving(e);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"controlPanel\">\r\n        <div>\r\n          {Object.values(MODES).map((mode, idx) => (\r\n            <button\r\n              onClick={() => this.props.setMode(mode)}\r\n              className={`mode${mode === this.props.mode ? \" selected\" : \"\"}`}\r\n              key={idx}\r\n            >\r\n              {mode}\r\n            </button>\r\n          ))}\r\n          <div style={{ width: \"10px\", display: \"inline-block\" }} />\r\n          <button\r\n            onClick={this.props.trainAsync}\r\n            className={this.props.workingAsync ? \"training\" : \"\"}\r\n          >\r\n            Train Asynchronously\r\n          </button>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <label>Cost of Living: </label>\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    value={this.state.costOfLiving}\r\n                    onChange={this.updateCostOfLiving}\r\n                    max={0}\r\n                    min={-10}\r\n                    step={0.1}\r\n                    type=\"number\"\r\n                    ref={this.colRef}\r\n                    onClick={() => this.colRef.current.focus()}\r\n                  ></input>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <label>Fail Rate: </label>\r\n                </td>\r\n\r\n                <td>\r\n                  <input\r\n                    value={this.state.failRate}\r\n                    onChange={this.updateFailRate}\r\n                    min={0}\r\n                    max={1}\r\n                    type=\"number\"\r\n                    step={0.1}\r\n                    ref={this.failRef}\r\n                    onClick={() => this.failRef.current.focus()}\r\n                  ></input>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <ol>\r\n          <li>Use arrow keys to move the agent</li>\r\n          <li>\r\n            The \"Fail Rate\" will determine the likelihood of the agent moving\r\n            unexpectedly\r\n          </li>\r\n          <li>Lose \"Cost of Living\" reward with every move</li>\r\n          <li>Left click to edit the board</li>\r\n          <li>\r\n            You can't run into <span>black</span> walls\r\n          </li>\r\n          <li>\r\n            Gain 10 reward for running into a{\" \"}\r\n            <span style={{ color: \"green\" }}>green</span> \"end state\" and\r\n            restart\r\n          </li>\r\n          <li>\r\n            Lose 10 reward for running into a{\" \"}\r\n            <span style={{ color: \"red\" }}>red</span> \"end state\" and restart\r\n          </li>\r\n          <li>\r\n            See how the bot does, and\r\n            <a href=\"github.com/nivista/qlearn-game\">read more</a>!\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import { RED_COST, GREEN_REWARD, DISCOUNT, LEARNING_RATE } from \"./constants\";\r\n\r\n/* Given an array of objects grid, and an intended direction integer from 0-3\r\n * representing left, up, right, or down, a costOfLiving representing base changes\r\n * change in reward for each move and a failRate indicating likelihood of\r\n * turning left or right unintentionally\r\n * Returns the agents nextLocation, the change in reward, the updated qval,\r\n * and whether or not it was gameover\r\n */\r\nexport const move = (grid, intendedDir, agentLoc, costOfLiving, failRate) => {\r\n  const rand = Math.random();\r\n  let dir = intendedDir;\r\n  if (rand < failRate / 2) {\r\n    dir++;\r\n  } else if (rand < failRate) {\r\n    dir--;\r\n  }\r\n  dir = dir % 4;\r\n\r\n  let nextLoc = agentLoc.slice();\r\n  switch (dir) {\r\n    case 0: // left\r\n      nextLoc[1]--;\r\n      break;\r\n    case 1: // up\r\n      nextLoc[0]--;\r\n      break;\r\n    case 2: // right\r\n      nextLoc[1]++;\r\n      break;\r\n    case 3: // down\r\n      nextLoc[0]++;\r\n      break;\r\n    default:\r\n  }\r\n\r\n  if (\r\n    nextLoc[0] < 0 ||\r\n    nextLoc[0] >= grid.length ||\r\n    nextLoc[1] < 0 ||\r\n    nextLoc[1] >= grid[0].length\r\n  ) {\r\n    nextLoc = agentLoc; // bring back to previous spot\r\n  }\r\n\r\n  let changeInReward = costOfLiving;\r\n  let nextLocReward;\r\n  let nextType = grid[nextLoc[0]][nextLoc[1]].type;\r\n  let gameover = false;\r\n  switch (nextType) {\r\n    case \"normal\":\r\n      nextLocReward = Math.max(...grid[nextLoc[0]][nextLoc[1]].qVals);\r\n      break;\r\n    case \"wall\":\r\n      nextLoc = agentLoc;\r\n      nextLocReward = Math.max(...grid[nextLoc[0]][nextLoc[1]].qVals);\r\n      break;\r\n    case \"reward\":\r\n      changeInReward += GREEN_REWARD;\r\n      gameover = true;\r\n      break;\r\n    case \"cost\":\r\n      changeInReward += RED_COST;\r\n      gameover = true;\r\n      break;\r\n    default:\r\n  }\r\n\r\n  if (gameover) {\r\n    nextLoc = [0, 0];\r\n    nextLocReward = 0;\r\n  }\r\n\r\n  const prevQ = grid[agentLoc[0]][agentLoc[1]].qVals[intendedDir];\r\n\r\n  const proposedQ = changeInReward + (1 - DISCOUNT) * nextLocReward;\r\n  const newQ = prevQ * (1 - LEARNING_RATE) + proposedQ * LEARNING_RATE;\r\n  return { nextLoc, newQ, changeInReward, gameover };\r\n};\r\n\r\n/* Takes a 2d array of objects grid and array agent ([row,col])\r\n * With probability exploitProb returns a best direction based on qvals\r\n * Otherwise returns a random move\r\n */\r\nexport function chooseMove(grid, agent, exploitProb) {\r\n  let square = grid[agent[0]][agent[1]];\r\n  if (Math.random() < exploitProb) {\r\n    // best move\r\n    let max = Math.max(...square.qVals);\r\n    let options = [];\r\n\r\n    square.qVals.forEach((val, i) => {\r\n      if (val === max) {\r\n        options.push(i);\r\n      }\r\n    });\r\n    return options[Math.floor(Math.random() * options.length)];\r\n  } else {\r\n    // return the direction with the smallest count, ie number of times tried\r\n    return [0, 1, 2, 3].reduce(\r\n      ([bestDir, smallest], dir) =>\r\n        smallest < square.counts[dir]\r\n          ? [bestDir, smallest]\r\n          : [dir, square.counts[dir]],\r\n      [-1, Math.inf]\r\n    )[0];\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport {\n  COST_OF_LIVING_DEFAULT,\n  FAIL_RATE_DEFAULT,\n  ROWS,\n  COLS,\n  MODES,\n  EPSILON\n} from \"./constants\";\nimport \"./App.css\";\nimport Grid from \"./Grid\";\nimport ControlPanel from \"./ControlPanel\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Worker from \"worker-loader!./worker.js\";\nimport { move, chooseMove } from \"./gameLogic\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const agent = [0, 0];\n    const grid = [];\n    for (let r = 1; r <= ROWS; r++) {\n      const newRow = [];\n      grid.push(newRow);\n      for (let c = 1; c <= COLS; c++) {\n        newRow.push({\n          type: \"normal\",\n          agent: false,\n          qVals: [0, 0, 0, 0],\n          counts: [0, 0, 0, 0]\n        });\n      }\n    }\n    grid[agent[0]][agent[1]].agent = true;\n    this.state = {\n      grid: grid,\n      mode: MODES.HUMAN_PLAY,\n      agent: agent,\n      reward: 0,\n      lastReward: \"_\",\n      botRewards: [],\n      costOfLiving: COST_OF_LIVING_DEFAULT,\n      failRate: FAIL_RATE_DEFAULT,\n      workingAsync: false\n    };\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.focusDiv();\n    this.worker = new Worker();\n    this.worker.addEventListener(\"message\", e => {\n      this.setState({ workingAsync: false });\n      const agent = this.state.agent;\n      e.data[agent[0]][agent[1]].agent = true;\n      for (let r = 0; r < e.data.length; r++) {\n        for (let c = 0; c < e.data[0].length; c++) {\n          e.data[r][c].type = this.state.grid[r][c].type;\n        }\n      }\n      this.setState({ grid: e.data });\n    });\n  }\n\n  // focuses on grid\n  focusDiv = () => {\n    this.myRef.current.focus({ preventScroll: true });\n  };\n\n  // given row/col of gridSquare, changes its type\n  // (normal -> wall -> reward -> cost -> normal)\n  switchType = (row, col) => {\n    const newGrid = this.state.grid.slice();\n    newGrid[row] = newGrid[row].slice();\n    switch (newGrid[row][col].type) {\n      case \"normal\":\n        newGrid[row][col].type = \"wall\";\n        break;\n      case \"wall\":\n        newGrid[row][col].type = \"reward\";\n        break;\n      case \"reward\":\n        newGrid[row][col].type = \"cost\";\n        break;\n      case \"cost\":\n        newGrid[row][col].type = \"normal\";\n        break;\n      default:\n    }\n    this.setState({ grid: newGrid });\n  };\n\n  /* Does nothing in HUMAN_PLAY mode or if arrow keys weren't pressed\n   * otherwise does move indicated by arrow keys and updates state\n   */\n  handleKeyDown = e => {\n    if (\n      this.state.mode !== MODES.HUMAN_PLAY ||\n      e.keyCode < 37 ||\n      e.keyCode > 40\n    ) {\n      return;\n    }\n    e.preventDefault();\n    let dir = e.keyCode - 37; //37 is the key code for left\n    const { nextLoc, newQ, changeInReward, gameover } = move(\n      this.state.grid,\n      dir,\n      this.state.agent,\n      this.state.costOfLiving,\n      this.state.failRate\n    );\n    this.updateState(dir, nextLoc, newQ, changeInReward, gameover);\n  };\n\n  // if passed mode is different then current mode, changes mode, clearsIntervals\n  // and starts a interval for bot movement if mode is BOT_TRAIN or BOT_PLAY\n  setMode = mode => {\n    if (this.state.mode === mode) return;\n    clearInterval(this.state.botInterval);\n    let botInterval = null;\n    if (mode === MODES.BOT_TRAIN) {\n      botInterval = setInterval(this.botMove, 10);\n    } else if (mode === MODES.BOT_PLAY) {\n      botInterval = setInterval(this.botMove, 150);\n    }\n\n    //set interval for doing training move if\n    this.setState({ mode: mode, botInterval: botInterval });\n  };\n\n  //Executes move by bot and updates state\n  //updates q values\n  botMove = () => {\n    let exploitProb = this.state.mode === MODES.BOT_TRAIN ? EPSILON : 1;\n    let dir = chooseMove(this.state.grid, this.state.agent, exploitProb);\n\n    const { nextLoc, newQ, changeInReward, gameover } = move(\n      this.state.grid,\n      dir,\n      this.state.agent,\n      this.state.costOfLiving,\n      this.state.failRate\n    );\n    this.updateState(dir, nextLoc, newQ, changeInReward, gameover);\n  };\n\n  // Updates state after a move given intendedDir (0-3), nextLoc ([row, col])\n  //newQ (number), changeInReward (number), gameover (boolean)\n  updateState = (intendedDir, nextLoc, newQ, changeInReward, gameover) => {\n    const grid = this.state.grid.slice();\n    grid[this.state.agent[0]] = grid[this.state.agent[0]].slice();\n    grid[nextLoc[0]] = grid[nextLoc[0]].slice();\n\n    let currGridSquare = {};\n    grid[this.state.agent[0]][this.state.agent[1]] = Object.assign(\n      currGridSquare,\n      grid[this.state.agent[0]][this.state.agent[1]]\n    );\n    grid[this.state.agent[0]][this.state.agent[1]] = currGridSquare;\n    //update qVals\n    currGridSquare.qVals = currGridSquare.qVals.slice();\n    currGridSquare.qVals[intendedDir] = newQ;\n\n    //update counts\n    currGridSquare.counts = currGridSquare.counts.slice();\n    currGridSquare.counts[intendedDir]++;\n\n    //move agent\n    currGridSquare.agent = false;\n    grid[nextLoc[0]][nextLoc[1]].agent = true;\n    //change rewards\n    let reward = this.state.reward + changeInReward;\n    let lastReward = this.state.lastReward;\n    if (gameover && this.state.mode !== MODES.HUMAN_PLAY) {\n      const rewardsList = this.state.botRewards.slice();\n      rewardsList.push(reward);\n      this.setState({ botRewards: rewardsList });\n    }\n    if (gameover) {\n      lastReward = reward;\n      reward = 0; //reset reward\n    }\n\n    this.setState({\n      reward,\n      grid,\n      lastReward,\n      agent: nextLoc\n    });\n  };\n\n  updateCostOfLiving = e => {\n    let val = parseFloat(e.target.value);\n    if (!isNaN(val) && val <= 0 && val >= -10)\n      this.setState({ costOfLiving: val });\n  };\n\n  updateFailRate = e => {\n    let val = parseFloat(e.target.value);\n    if (!isNaN(val) && val >= 0 && val <= 1) {\n      this.setState({ failRate: val });\n    }\n  };\n\n  trainAsync = () => {\n    this.setState({ workingAsync: true });\n    this.worker.postMessage({\n      grid: this.state.grid,\n      agent: this.state.agent,\n      costOfLiving: this.state.costOfLiving,\n      failRate: this.state.failRate\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\" tabIndex={0} onClickCapture={this.focusDiv}>\n        <ControlPanel\n          setMode={this.setMode}\n          mode={this.state.mode}\n          costOfLiving={this.state.costOfLiving}\n          updateCostOfLiving={this.updateCostOfLiving}\n          failRate={this.state.failRate}\n          updateFailRate={this.updateFailRate}\n          trainAsync={this.trainAsync}\n          workingAsync={this.state.workingAsync}\n        />\n        <Grid\n          data={this.state.grid}\n          rewardsData={this.state.botRewards}\n          switchType={this.switchType}\n          aRef={this.myRef}\n          keyDownFunc={this.handleKeyDown}\n          currReward={this.state.reward}\n          lastReward={this.state.lastReward}\n          resetRewards={() => this.setState({ botRewards: [] })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}